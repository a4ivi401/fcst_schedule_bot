import asyncio
from aiogram import Bot, Dispatcher
from dotenv import load_dotenv
import os
from src.bot import dp, bot
from src.parser import run_parser
from src.calendar_sync import sync_calendar_task

async def start_scheduler():
    while True:
        run_parser()
        await asyncio.sleep(15 * 60)  # 15 —Ö–≤–∏–ª–∏–Ω

async def start_calendar_sync():
    from src.calendar_sync import load_schedule_hash, get_schedule_hash
    from src.parser import load_schedule_cache

    while True:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–º—ñ–Ω–∏–≤—Å—è —Ä–æ–∑–∫–ª–∞–¥
        schedule = load_schedule_cache()
        if not schedule:
            await asyncio.sleep(15 * 60)  # –ó–∞—á–µ–∫–∞—Ç–∏ 15 —Ö–≤, —è–∫—â–æ –Ω–µ–º–∞—î —Ä–æ–∑–∫–ª–∞–¥—É
            continue

        current_hash = get_schedule_hash(schedule)
        previous_hash = load_schedule_hash()

        if current_hash != previous_hash:
            print("üîÑ –í–∏—è–≤–ª–µ–Ω–æ –∑–º—ñ–Ω–∏ –≤ —Ä–æ–∑–∫–ª–∞–¥—ñ. –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è...")
            sync_calendar_task()

        await asyncio.sleep(15 * 60)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—ñ 15 —Ö–≤–∏–ª–∏–Ω

async def main():
    load_dotenv()
    bot_token = os.getenv("BOT_TOKEN")

    if not bot_token:
        raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ")

    bot = Bot(token=bot_token)

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–∞—Ä—Å–µ—Ä —Ñ–æ–Ω–æ–º
    scheduler_task = asyncio.create_task(start_scheduler())

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    calendar_task = asyncio.create_task(start_calendar_sync())

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())