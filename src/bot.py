from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import asyncio
from dotenv import load_dotenv
import os

from src.parser import parse_schedule

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –∑ .env
load_dotenv()

# –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω –∑ .env
BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ä–æ–∑–∫–ª–∞–¥—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π /today –∞–±–æ /week.")

@dp.message(Command("today"))
async def cmd_today(message: types.Message):
    url = "https://portal.nau.edu.ua/schedule/group?id=4349"
    schedule = parse_schedule(url)

    if not schedule:
        await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥.")
        return

    from datetime import datetime
    today_name = {
        0: "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫",
        1: "–í—ñ–≤—Ç–æ—Ä–æ–∫",
        2: "–°–µ—Ä–µ–¥–∞",
        3: "–ß–µ—Ç–≤–µ—Ä",
        4: "–ü'—è—Ç–Ω–∏—Ü—è",
        5: "–°—É–±–æ—Ç–∞",
        6: "–ù–µ–¥—ñ–ª—è"
    }[datetime.now().weekday()]

    lessons = schedule.get(today_name, [])
    if not lessons:
        await message.answer(f"–°—å–æ–≥–æ–¥–Ω—ñ ({today_name}) –ø–∞—Ä –Ω–µ–º–∞—î.")
        return

    response = f"–†–æ–∑–∫–ª–∞–¥ –Ω–∞ {today_name}:\n"
    for lesson in lessons:
        response += f"{lesson['time']} ‚Äî {lesson['subject']}\n"
        response += f"  –í–∏–∫–ª–∞–¥–∞—á: {lesson['teacher']}\n"
        response += f"  –ê—É–¥–∏—Ç–æ—Ä—ñ—è: {lesson['room']}\n\n"
    
    await message.answer(response)

@dp.message(Command("week"))
async def cmd_week(message: types.Message):
    url = "https://portal.nau.edu.ua/schedule/group?id=4349"
    schedule = parse_schedule(url)

    if not schedule:
        await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥.")
        return

    response = "–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å:\n\n"
    for day, lessons in schedule.items():
        response += f"üìÖ {day}:\n"
        if lessons:
            for lesson in lessons:
                response += f"  {lesson['time']} ‚Äî {lesson['subject']}\n"
                response += f"    –í–∏–∫–ª–∞–¥–∞—á: {lesson['teacher']}\n"
                response += f"    –ê—É–¥–∏—Ç–æ—Ä—ñ—è: {lesson['room']}\n\n"
        else:
            response += "  –ü–∞—Ä –Ω–µ–º–∞—î\n\n"

    await message.answer(response)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
