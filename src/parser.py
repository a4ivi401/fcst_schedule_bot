import requests
from bs4 import BeautifulSoup
from datetime import datetime
import json
import os

def get_current_week_type():
    # –ü–æ—á–∞—Ç–æ–∫ –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ —Ç–∏–∂–Ω—è ‚Äî 1 –≤–µ—Ä–µ—Å–Ω—è 2025
    start_date = datetime(2025, 9, 1)
    today = datetime.now()

    # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –º—ñ–∂ –¥–∞—Ç–∞–º–∏
    delta = today - start_date
    weeks_passed = delta.days // 7

    # –Ø–∫—â–æ —Å—å–æ–≥–æ–¥–Ω—ñ —Å—É–±–æ—Ç–∞ –∞–±–æ –Ω–µ–¥—ñ–ª—è, –≤–≤–∞–∂–∞—î–º–æ, —â–æ –≤–∂–µ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å
    if today.weekday() >= 5:  # 5 ‚Äî —Å—É–±–æ—Ç–∞, 6 ‚Äî –Ω–µ–¥—ñ–ª—è
        weeks_passed += 1

    # –Ø–∫—â–æ weeks_passed –ø–∞—Ä–Ω–µ ‚Äî —Ü–µ —Ç–∏–∂–¥–µ–Ω—å 1, —ñ–Ω–∞–∫—à–µ ‚Äî —Ç–∏–∂–¥–µ–Ω—å 2
    return "week1" if weeks_passed % 2 == 0 else "week2"

def parse_schedule(url):
    response = requests.get(url)
    if response.status_code != 200:
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É")
        return None

    soup = BeautifulSoup(response.text, 'html.parser')

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —è–∫–∏–π —Ç–∏–∂–¥–µ–Ω—å –∑–∞—Ä–∞–∑
    current_week = get_current_week_type()
    print(f"üîç –ü–æ—Ç–æ—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å: {current_week.upper()}")

    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –±–ª–æ–∫–∏ –∑ —Ä–æ–∑–∫–ª–∞–¥–æ–º
    wrappers = soup.find_all('div', {'class': 'wrapper'})

    target_table = None
    for wrapper in wrappers:
        header = wrapper.find('h2')
        if not header:
            continue

        if "–¢–∏–∂–¥–µ–Ω—å 1" in header.get_text() and current_week == "week1":
            target_table = wrapper.find('table', {'class': 'schedule'})
            print("‚úÖ –í–∏–±—Ä–∞–Ω–æ —Ç–∞–±–ª–∏—Ü—é –¥–ª—è –¢–∏–∂–Ω—è 1")
            break
        elif "–¢–∏–∂–¥–µ–Ω—å 2" in header.get_text() and current_week == "week2":
            target_table = wrapper.find('table', {'class': 'schedule'})
            print("‚úÖ –í–∏–±—Ä–∞–Ω–æ —Ç–∞–±–ª–∏—Ü—é –¥–ª—è –¢–∏–∂–Ω—è 2")
            break

    if not target_table:
        print("‚ùå –¢–∞–±–ª–∏—Ü—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ç–∏–∂–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
        return None

    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤–∏ –¥–Ω—ñ–≤ —Ç–∏–∂–Ω—è
    header_row = target_table.find('thead').find('tr')
    day_names = [th.get_text(strip=True) for th in header_row.find_all('th', {'class': 'day-name'})]
    print(f"üìÖ –î–Ω—ñ —Ç–∏–∂–Ω—è: {day_names}")

    # –û—Ç—Ä–∏–º—É—î–º–æ —Ä—è–¥–∫–∏ –∑ –ø–∞—Ä–∞–º–∏ (tbody)
    rows = target_table.find_all('tr')

    schedule = {}
    for i, row in enumerate(rows):
        if i == 0:  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            continue

        cells = row.find_all(['th', 'td'])
        if not cells:
            continue

        # –ß–∞—Å –ø–∞—Ä–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "08:00-09:35")
        time_cell = cells[0]
        time_range = time_cell.find('div', {'class': 'full-name'}).get_text(strip=True)
        lesson_number = time_cell.find('div', {'class': 'name'}).get_text(strip=True)

        # –ü—Ä–æ—Ö–æ–¥–∏–º–æ –ø–æ –∫–æ–º—ñ—Ä–∫–∞—Ö (–¥–Ω—è—Ö —Ç–∏–∂–Ω—è)
        for j, cell in enumerate(cells[1:], start=0):  # –∫–æ–º—ñ—Ä–∫–∏ –∑ 1 (—á–∞—Å –≤ 0)
            if j >= len(day_names):
                break

            day = day_names[j]
            if day not in schedule:
                schedule[day] = []

            pairs_div = cell.find('div', {'class': 'pairs'})
            if not pairs_div:
                continue

            pair_divs = pairs_div.find_all('div', {'class': 'pair'})
            for pair in pair_divs:
                subject_elem = pair.find('div', {'class': 'subject'})
                if not subject_elem:
                    continue

                subject = subject_elem.get_text(strip=True)

                teacher_elem = pair.find('div', {'class': 'teacher'})
                teacher = teacher_elem.get_text(strip=True) if teacher_elem else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"

                room_elem = pair.find('div', {'class': 'room'})
                room = room_elem.get_text(strip=True).replace('–∞—É–¥. ', '') if room_elem else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"

                activity_tag = pair.find('div', {'class': 'activity-tag'})
                activity = activity_tag.get_text(strip=True) if activity_tag else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"

                lesson = {
                    "lesson_number": lesson_number,
                    "time": time_range,
                    "subject": subject,
                    "activity": activity,
                    "teacher": teacher,
                    "room": room
                }
                schedule[day].append(lesson)

    return schedule

def save_schedule_cache(schedule):
    os.makedirs('data', exist_ok=True)
    with open('data/schedule_cache.json', 'w', encoding='utf-8') as f:
        json.dump(schedule, f, ensure_ascii=False, indent=2)

def run_parser():
    url = "https://portal.nau.edu.ua/schedule/group?id=4349"
    schedule = parse_schedule(url)

    if schedule:
        save_schedule_cache(schedule)
        print("‚úÖ –†–æ–∑–∫–ª–∞–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ data/schedule_cache.json")
    else:
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥.")