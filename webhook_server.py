from aiogram import Bot, Dispatcher, types
from fastapi import FastAPI, Request
import asyncio
import uvicorn
from dotenv import load_dotenv
import os

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ dp —ñ bot –∑ bot.py
from src.bot import dp, bot

load_dotenv()

# –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω —ñ–∑ .env
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ")

# –ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á–∞—î–º–æ bot, —â–æ–± –≤—ñ–Ω –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–≤ —Ç–æ–∫–µ–Ω —ñ–∑ .env
bot = Bot(token=BOT_TOKEN)

# –û—Ç—Ä–∏–º—É—î–º–æ webhook
async def handle_webhook(request: Request):
    update_json = await request.json()
    update = types.Update(**update_json)
    await dp.feed_update(bot, update)
    return {"ok": True}

app = FastAPI()
app.add_api_route("/webhook", handle_webhook, methods=["POST"])

async def start_scheduler():
    from src.parser import run_parser
    while True:
        run_parser()
        await asyncio.sleep(15 * 60)  # 15 —Ö–≤–∏–ª–∏–Ω

async def start_calendar_sync():
    from src.calendar_sync import sync_calendar_task, load_schedule_hash, get_schedule_hash
    from src.parser import load_schedule_cache

    while True:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–º—ñ–Ω–∏–≤—Å—è —Ä–æ–∑–∫–ª–∞–¥
        schedule = load_schedule_cache()
        if not schedule:
            await asyncio.sleep(15 * 60)  # –ó–∞—á–µ–∫–∞—Ç–∏ 15 —Ö–≤, —è–∫—â–æ –Ω–µ–º–∞—î —Ä–æ–∑–∫–ª–∞–¥—É
            continue

        current_hash = get_schedule_hash(schedule)
        previous_hash = load_schedule_hash()

        if current_hash != previous_hash:
            print("üîÑ –í–∏—è–≤–ª–µ–Ω–æ –∑–º—ñ–Ω–∏ –≤ —Ä–æ–∑–∫–ª–∞–¥—ñ. –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è...")
            sync_calendar_task()

        await asyncio.sleep(15 * 60)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—ñ 15 —Ö–≤–∏–ª–∏–Ω

async def main():
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ–æ–Ω–æ–≤—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
    scheduler_task = asyncio.create_task(start_scheduler())
    calendar_task = asyncio.create_task(start_calendar_sync())

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    config = uvicorn.Config(app, host="0.0.0.0", port=8000, log_level="info")
    server = uvicorn.Server(config)
    await server.serve()

if __name__ == "__main__":
    asyncio.run(main())